{"status": "in-progress", "priority": "bug", "title": "MySQL-based test suite fails due to problems with fixture loading", "milestone": "", "superceder": "", "nosylist": ["jwm, paulproteus"], "assigned": "jwm", "waitingon": "", "keywords": [], "id": "889", "files": [{"url": "http://openhatch.org/bugs/file687/unnamed", "author": "paulproteus"}], "history": [{"message": "(UNKNOWN CHARACTER)I think no one is!\n   \n", "author": "paulproteus"}, {"message": "Is anyone currently working on this?\n   \n", "author": "Aaron1011"}, {"message": "The best path forward, given how crazy this is, is to stop using Twill's API, and \nfor each of these tests that are failing, work to reimplement just enough of the \nTwill API without using the Twill WSGI wrapping stuff.\n\nSorry if that's vague. I can clarify more.\n   \n", "author": "paulproteus"}, {"message": "More IRC snippets between me and paulproteus about this:\n\n[8:21pm] mandarg: well, it was about the MYSQL=true test failures\n[8:21pm] paulproteus: Mm, do ask!\n[8:21pm] paulproteus: Those are interesting and complex.\n[8:21pm] paulproteus: The fix, however, is simple I believe.\n[8:21pm] paulproteus: Which is to stop using tc.go() etc.\n[8:22pm] mandarg: is the problem that data is not getting loaded into the database when the tests are \nexecuted, but there is no way of making sure the data is in before they start?\n[8:22pm] paulproteus: So...\n[8:22pm] paulproteus: The data is getting loaded into the database.\n[8:22pm] paulproteus: However, it's loaded in a transaction and not visible from other transactions.\n[8:22pm] paulproteus: The extent to which is \"in\" the database is questionable, you might see.\n[8:22pm] paulproteus: This is a feature of the Django test runner; doing it this way, as you saw, makes \nfor huge performance advantages.\n[8:23pm] paulproteus: The built-in Django \"test client\" seems to work properly with this, by making \nsure to use the same MySQL connection as the one that did the insertion.\n[8:23pm] paulproteus: All is well.\n[8:23pm] mandarg: ah\n[8:23pm] paulproteus: But the Twill-based test suite somehow is not using the same MySQL \nconnection, I believe.\n[8:23pm] paulproteus: You can see that because if you force the transaction to get committed, then \nthe Twill-based tests pass.\n[8:23pm] paulproteus: So there's probably some way to make the Twill-based test suite do the right \nthing here.\n[8:23pm] mandarg: did you see that?\n[8:23pm] paulproteus: And it's probably a regression in our test suite caused by a Django upgrade at \nsome point.\n\n-------------------------------------------------------------------------------------\n\nI believe the import of all this is that there are two ways to possibly fix this.\n\n1. Abandon twill entirely, and use something like django-webtest instead \n(<a href=\"https://pypi.python.org/pypi/django-webtest\">https://pypi.python.org/pypi/django-webtest</a>)\n\n2. Use something like <a href=\"http://pythonhosted.org/django-test-utils/,\">http://pythonhosted.org/django-test-utils/,</a> which might fix the problems with \ntwill.\n   \n", "author": "mandarg"}, {"message": "This is a more noticable thing now that <a href=\"https://github.com/openhatch/oh-mainline/pull/146\">https://github.com/openhatch/oh-mainline/pull/146</a> has \nbeen merged.\n   \n", "author": "jwm"}, {"message": "20:33:22&lt; johnmorr&gt; paulproteus: do you have any idea why the travis build would fail (and\n in nonsensical ways) with USE_MYSQL == true?\n20:33:38&lt; paulproteus&gt; Sadly yes.\n20:33:47 * johnmorr listens to paulproteus.\n20:33:54&lt; paulproteus&gt; They mostly relate to some kind of insanity in the inter-dependenci\nes between the fixtures and their primary keys.\n20:34:07&lt; paulproteus&gt; That's the first one.\n20:34:17&lt; paulproteus&gt; You can see some of this with sqlite too, but we skip those tests w\nith sqlite.\n20:34:48&lt; paulproteus&gt; Let me go read the log for the rest\n20:34:59&lt; johnmorr&gt; <a href=\"https://travis-ci.org/openhatch/oh-mainline/jobs/12337407\">https://travis-ci.org/openhatch/oh-mainline/jobs/12337407</a>\n20:35:31&lt; johnmorr&gt; looks like a bunch of twill failures, too\n20:35:32&lt; paulproteus&gt; <a href=\"https://travis-ci.org/openhatch/oh-mainline/jobs/12337093\">https://travis-ci.org/openhatch/oh-mainline/jobs/12337093</a> is simply\n because someone needs to 'apt-get install python-mysqldb'\n20:35:33&lt; paulproteus&gt; let me read that\n20:35:46&lt; paulproteus&gt; The twill failures are usually because the app lacks the data that \nthe tests expect, fwiw.\n20:35:52&lt; paulproteus&gt; Which are because the fixture loads failed.\n20:36:10&lt; paulproteus&gt; iirc we hit this problem with mysql 5.5 and up, but not e.g. 5.0, o\nn which we developed ~4y ago\n20:36:31&lt; johnmorr&gt; this problem == the fixture loads failing?\n20:36:35&lt; paulproteus&gt; Yeah.\n20:36:50&lt; paulproteus&gt; Which you should be able to reproduce by doing:\n20:36:53&lt; paulproteus&gt; $ export USE_MYSQL=1\n20:37:01&lt; paulproteus&gt; $ python manage.py syncdb --noinput\n20:37:11&lt; paulproteus&gt; $ python manage.py loaddata just_one_person.json\n20:37:26&lt; paulproteus&gt; (where just_one_person.json is the file part of a path of a real file in \nmysite/*/fixtures/* )\n20:37:38&lt; paulproteus&gt; (I'm not sure that's a real valid name, but it's a made-up example; I hope \nthat's clear enough)\n20:37:43&lt; johnmorr&gt; nod paulproteus \n20:38:04&lt; paulproteus&gt; So if you look at the failing tests, and the values of the fixtures list for \nthat test, you should probably be able to trigger the insane errors by simply loading them in the \norder they are provided to that test case.\n20:38:08&lt; paulproteus&gt; Now... what to do about that.\n20:38:33&lt; paulproteus&gt; The lovely Walter iirc at PyCon sprints 2012 (2011??) looked into this for \na while and came out of it with his head spinning.\n20:38:40&lt; paulproteus&gt; Probably we can combine more of the fixtures into one file.\n20:38:52&lt; paulproteus&gt; Part of the problem (most of it? all of it?) relates to auto-creating Person \nobjects from User objects.\n20:38:59&lt; paulproteus&gt; it's all coming back to me...\n20:39:06&lt; paulproteus&gt; There's a post-create hook for the User object which makes sure a \nPerson object gets made.\n20:39:24&lt; paulproteus&gt; But in fixture load time we definitely want not to auto-create the Person \n-- we want to use the Person object that is provided in the JSON!\n20:39:28&lt; paulproteus&gt; That's what I recall.\n20:39:43&lt; paulproteus&gt; I think that's the whole story. It's relatively bad, but also relatively hairy.\n20:39:47&lt; paulproteus&gt; If it could end, that would be fantastic.\n   \n", "author": "jwm"}]}